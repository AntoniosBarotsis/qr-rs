# Mostly created by https://github.com/axodotdev/cargo-dist.
name: Release CLI crate

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release (should be in the form of `v0.1.0`.)
        required: true
        type: string

env:
  ALL_CARGO_DIST_TARGET_ARGS: --target=x86_64-unknown-linux-gnu --target=x86_64-apple-darwin --target=x86_64-pc-windows-msvc 
  ALL_CARGO_DIST_INSTALLER_ARGS: --installer=github-shell --installer=github-powershell 

jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ inputs.version }}',
              sha: context.sha
            })

  # Create the Github Release™️ so the packages have something to be uploaded to
  create-release:
    needs: create-tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create-gh-release.outputs.computed-prefix }}${{ steps.create-gh-release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: create-gh-release
        uses: taiki-e/create-gh-release-action@v1
        with:
          draft: true
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}


  # Build and packages all the things
  upload-artifacts:
    needs: create-release
    strategy:
      matrix:
        # For these target platforms
        include:
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-20.04
          install-dist: curl --proto '=https' --tlsv1.2 -L -sSf https://github.com/axodotdev/cargo-dist/releases/download/v0.0.2/installer.sh | sh
        - target: x86_64-apple-darwin
          os: macos-11
          install-dist: curl --proto '=https' --tlsv1.2 -L -sSf https://github.com/axodotdev/cargo-dist/releases/download/v0.0.2/installer.sh | sh
        - target: x86_64-pc-windows-msvc
          os: windows-2019
          install-dist: irm 'https://github.com/axodotdev/cargo-dist/releases/download/v0.0.2/installer.ps1' | iex
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Install cargo-dist
        run: ${{ matrix.install-dist }}
      - name: Run cargo-dist
        # This logic is a bit janky because it's trying to be a polyglot between
        # powershell and bash since this will run on windows, macos, and linux!
        # The two platforms don't agree on how to talk about env vars but they
        # do agree on 'cat' and '$()' so we use that to marshal values between commmands.
        run: |
          # Actually do builds and make zips and whatnot
          cargo dist --target=${{ matrix.target }} --output-format=json > dist-manifest.json
          echo "dist ran successfully"
          cat dist-manifest.json
          # Parse out what we just built and upload it to the Github Release™️
          cat dist-manifest.json | jq --raw-output ".releases[].artifacts[].path" > uploads.txt
          echo "uploading..."
          cat uploads.txt
          gh release upload ${{ needs.create-release.outputs.tag }} $(cat uploads.txt)
          echo "uploaded!"
        working-directory: ./cli

  # Compute and upload the manifest for everything
  upload-manifest:
    needs: create-release
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Install cargo-dist
        run: curl --proto '=https' --tlsv1.2 -L -sSf https://github.com/axodotdev/cargo-dist/releases/download/v0.0.2/installer.sh | sh
      - name: Run cargo-dist manifest
        run: |
          # Generate a manifest describing everything
          cargo dist manifest --no-local-paths --output-format=json $ALL_CARGO_DIST_TARGET_ARGS $ALL_CARGO_DIST_INSTALLER_ARGS > dist-manifest.json
          echo "dist manifest ran successfully"
          cat dist-manifest.json
          # Upload the manifest to the Github Release™️
          gh release upload ${{ needs.create-release.outputs.tag }} dist-manifest.json
          echo "uploaded manifest!"
          # Edit the Github Release™️ title/body to match what cargo-dist thinks it should be
          CHANGELOG_TITLE=$(cat dist-manifest.json | jq --raw-output ".releases[].changelog_title")
          cat dist-manifest.json | jq --raw-output ".releases[].changelog_body" > new_dist_changelog.md
          gh release edit ${{ needs.create-release.outputs.tag }} --title="$CHANGELOG_TITLE" --notes-file=new_dist_changelog.md
          echo "updated release notes!"
        working-directory: ./cli
      - name: Run cargo-dist --installer=...
        run: |
          # Run cargo dist with --no-builds to get agnostic artifacts like installers
          cargo dist --output-format=json --no-builds $ALL_CARGO_DIST_INSTALLER_ARGS > dist-manifest.json
          echo "dist ran successfully"
          cat dist-manifest.json
          # Grab the installers that were generated and upload them.
          # This filter is working around the fact that --no-builds is kinds hacky
          # and still makes/reports malformed zips that we don't want to upload.
          cat dist-manifest.json | jq --raw-output '.releases[].artifacts[] | select(.kind == "installer") | .path' > uploads.txt
          echo "uploading..."
          cat uploads.txt
          gh release upload ${{ needs.create-release.outputs.tag }} $(cat uploads.txt)
          echo "uploaded installers!"
        working-directory: ./cli

  # Mark the Github Release™️ as a non-draft now that everything has succeeded!
  publish-release:
    needs: [create-release, upload-artifacts, upload-manifest]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: mark release as non-draft
        run: |
          gh release edit ${{ needs.create-release.outputs.tag }} --draft=false
