{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to QR-RS","text":"<p>A simple server and CLI that generates QR Codes and overlays a logo on top of them.</p> <p>It was developed for GDSC Delft.</p> <p> </p> <p>The purpose of this is to allow members to easily generate promotional QR Codes to include in banners/slides without having to worry about creating accounts on third-party sites and free-tier limits.</p> <p>The core library is written in Rust and is a thin wrapper around an existing crate that does the actual QR Code generation.</p> <p>That core functionality is currently exposed through a web server and a command line tool, the latter of which is recommended for personal use as it is just easier to run.</p> <p>For details on how to run and use the server or the CLI, refer to their respective pages.</p> <p>The rest of the stuff mentioned on this page is mostly developer information.</p>"},{"location":"#project-layout","title":"Project Layout","text":"<p>The project is currently split into multiple crates</p> <ul> <li><code>lib</code>: The core logic of the project</li> <li><code>server</code>: A server you can run locally to use the <code>lib</code> crate</li> <li><code>cli</code>: A command line interface to the <code>lib</code> crate</li> <li><code>common</code>: Some reusable code for <code>server</code> and <code>cli</code></li> </ul> <p>The <code>lib</code> and <code>cli</code> crates will be published on <code>crates.io</code> while the <code>server</code> crate will be published as a Docker image.</p> <p>The <code>cli</code> might be uploaded to other package managers, however, that's something that I don't want to tackle alone so if you are looking for a place to contribute, start  here :)</p> <p>The <code>common</code> crate contains very little code and there's no reason to publish it on its own.</p>"},{"location":"#deployment","title":"Deployment","text":"<p>The <code>lib</code>, <code>common</code> and <code>cli</code> are now published automatically to <code>crates.io</code>. The <code>server</code> is published to DockerHub. Binaries are generated for the <code>cli</code> in Github Releases.</p> <p>Publishing the <code>cli</code> on more commonly used package managers has been suggested but will likely not be tackled anytime soon (unless you are willing to help!).</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Any feature requests, bug reports or general feedback is welcome!</p> <p>Feel free to open an issue or start a discussion in the repository.</p> <p>If you want to contribute with code, you can take a look at the \"help wanted\" issues as I will most likely not be implementing those myself.</p> <p>A decent CI pipeline is in place to ensure that everything builds and that all tests pass. I like being strict when it comes to formatting and linting so there is a CI job for that as well.</p>"},{"location":"cli/","title":"CLI","text":""},{"location":"cli/#installation","title":"Installation","text":"<p>Note</p> <p>Make sure you have  Cargo installed!</p> <pre><code>cargo install qrg\n</code></pre> <p>Alternatively, you can download pre-built binaries from GitHub Releases.</p>"},{"location":"cli/#usage","title":"Usage","text":"<p>You can get the list of available commands as follows:</p> <pre><code>$ qrg -h\nGenerates QRCodes with a logo overlay.\n\nUsage: qrg.exe [OPTIONS] &lt;CONTENT&gt;\n\nArguments:\n  &lt;CONTENT&gt;  The text the qr code should contain\n\nOptions:\n  -d, --destination &lt;DESTINATION&gt;\n          The filename the QR Code should be saved in [default: out.png]\n  -s, --size &lt;SIZE&gt;\n          The size of the QR Code [default: 600]\n  -l, --logo &lt;LOGO&gt;\n          The name of the logo to use in the overlay. Currently, only the Google logo can be used [default: google]\n      --logo-source &lt;LOGO_SOURCE&gt;\n          Path to the logo (must be a valid PNG/JPEG) [aliases: path]\n      --logo-web-source &lt;LOGO_WEB_SOURCE&gt;\n          URL to the logo (must be a valid PNG/JPEG) [aliases: web]\n  -c, --bg-color &lt;BG_COLOR&gt;\n          The background color of the QR Code (in hex) [default: FFFFFF]\n      --logo-bg-color &lt;LOGO_BG_COLOR&gt;\n          The background color of the logo (in hex) [default: FFFFFF] [aliases: lc]\n  -h, --help\n          Print help\n  -V, --version\n          Print version\n</code></pre> <p>I will try to keep this updated but you should run it for yourself just in case some command detail has changed.</p>"},{"location":"cli/#example-usage","title":"Example Usage","text":"<p>Create a QR Code pointing to <code>github.com</code> and dump the image to a file called <code>tmp.png</code>.</p> <pre><code>qrg github.com -d tmp.png\n</code></pre> <p>Create a QR Code with the text <code>Hello, World!</code> using Github's logo and a dark background</p> <pre><code>qrg \"Hello, World!\" -c 36393e --web https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\n</code></pre>"},{"location":"server/","title":"Server","text":""},{"location":"server/#usage","title":"Usage","text":"<p>Start the server with <code>cargo run -r</code> (in the <code>server</code> directory) then run the following to generate a QR Code that points to <code>google.com</code> and save it to <code>tmp.png</code>. </p> <pre><code>curl http://127.0.0.1:8080/qr?content=google.com --output tmp.png\n./tmp.png\n</code></pre> <p>The endpoint documentation can be read with</p> <pre><code>curl http://127.0.0.1:8080/\n</code></pre> <p>You can also run this through Docker with</p> <pre><code># docker build -t qr-rs -f server/Dockerfile .\n# docker run -p 8080:8080 qr-rs\ndocker pull antoniosbarotsis/qr-rs:tagname\ndocker run -p 8080:8080 antoniosbarotsis/qr-rs:tagname\n</code></pre> <p>You can see the <code>tagnames</code> here.</p>"}]}